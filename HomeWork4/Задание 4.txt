Перед началом непосредственной работы рекомендую сперва всё прочесть, схематично на листе бумаги набросать план, что необходимо сделать (Ну и по ходу дела дорабатывать и исправлять его):
	1) Какие нужно в итоге создать глобальные объекты и функции
	2) Какие у этих объектов должны быть свойства (какого типа данных эти свойства будут), какие должны быть методы
	3) Можно сделать схему, с какими свойствами каждый метод должен взаимодействовать в процессе своей работы
	4) Так же, можно записать, какие переменные могут понадобиться для каждой функции в процессе работы

1) Создайте объект Магазин. (Названия всех объектов, функций, свойств, методов, переменных - можете придумывать сами, но они должно отражать суть, чтобы было удобно ими пользоваться. Я даю названия для примера, на русском, чтобы передать суть задания).

2) Создать несколько массивов (для их хранения используйте свойство объекта Магазин, например объект Ассортимент).
	2.1) Каждый массив будет предназначен для определённой категории продуктов: Молочные продукты, Мясо, Рыба, Хлеб, Овощи, Фрукты
	2.2) Наполните массивы произвольными продуктами, относящимися к этой категории

3) Добавьте объекту Магазин два метода "Добавить продукт", "Удалить продукт"
	3.1) "Добавить продукт" просит у пользователя ввести два значения: "Категория продукта" и "Название продукта". После этого, если категория была выбрана верно и название продукта было введено пользователем - соответствующий продукт должен появиться в массиве продуктов этой категории
		P.S. Рекомендую для Категории продукта просить у пользователя ввести номер категории, и показать в сообщении список категорий (Чтобы избежать возможных опечаток).
			*Будет плюсом, если получится у вас это сделать абстрактным решением, чтобы работало с любым количеством категорий.
		P.P.S. Чтобы выполнить перенос на новую строку используйте специальный символ /n
			Например, строка 'Список категорий: \n 1.Молочные \n 2.Мясные' будет выглядеть так:
				Список категорий:
				 1.Молочные
				 2.Мясные
	3.2) "Удалить продукт" просит у пользователя ввести название продукта. После получения значения продукта функция выполняет поиск по категориям, если такой продукт был найден - он удаляется из массива и показывается сообщение "Продукт был удалён". Если такой продукт не был найден ни в одной из категорий - показывается сообщение "Продукт не найден"

4) Добавьте объекту Магазин свойство Цены
	4.1) Это свойство должно быть объектом
	4.2) Этот объект должен содержать пары ключ:значение, где ключами будут названия продуктов из всех категорий, а значениями - их цена. Цены можете указать случайным образом.

5*) Доработайте функции "Добавить продукт" и "Удалить продукт".
	5.1) Добавьте новый метод объекту Магазин "Проверить цены"
	5.2) Этот метод должен вызываться в работы функций "Добавить продукт" и "Удалить продукт", в случае их успешной работы, то есть срабатывать после того, как эти функции добавили/удалили какой-то продукт
	5.3) Метод "Проверить цены" должен проверять список продуктов в объекте Цены, сравнивая их с массивами продуктов всех категорий
	5.4) Если в списке продуктов есть продукт, которого нет в списке цен - его нужно добавить, спросив у пользователя цену этого продукта с сообщением "Пожалуйста, укажите цену {Название}"
	5.5) Если в списке цен есть продукт, которого нет в списке продуктов - нужно его удалить и показать сообщение "Продукт {Название} был удалён из каталога, т.к. он не является частью ассортимента"

6*) Создайте магазину функцию "Пришёл покупатель".
	6.1) Эта функция должна создавать новый объект, давать ему динамически генерируемое название, например "Покупатель N", где N - это номер покупателя
	6.2) Далее функция добавляет этому объекту свойство "Список покупок", массив, и случайным образом складывает туда продукты, которые имеются в Ассортименте объекта Магазин. Количество добавленных продуктов, категория, из которых они берутся и сами продукт - всё выбирается случайным образом (поэтому лучше создайте функцию рандомизатор, которую будете переиспользовать).
	6.3) После этого, функция должна пройтись по этому списку покупок, сверить их со списком цен, и добавить объекту покупателя свойство "Чек", куда запишет сумму к оплате за эти продукты в его корзине
	6.4*) Этот объект, созданный функцией, должен быть добавлен в объект Магазин, в свойство "Список покупателей" (Ситуации, когда повторно приходит тот же человек - не рассматриваем, каждый покупатель - уникальный)
	6.5) После добавления нового покупателя к Списку покупателей - нужно пройтись по Списку покупателей в объекте Магазин, посчитать сумму Чеков всех покупателей, которая будет записана в свойство объекта Магазин "Доходы"